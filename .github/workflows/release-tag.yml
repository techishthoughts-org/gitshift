name: üè∑Ô∏è Create Release Tag

on:
  # Trigger on successful CI completion
  workflow_run:
    workflows: ["üöÄ GitPersona CI"]
    types:
      - completed
    branches:
      - main

env:
  GO_VERSION: '1.23'

jobs:
  # üè∑Ô∏è Create Tag
  create-tag:
    name: üè∑Ô∏è Create Release Tag
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üêπ Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: üìã Calculate New Version
      id: version
      run: |
        # Get latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"

        # Generate changelog since latest tag
        CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)

        if [ -z "$CHANGELOG" ]; then
          echo "No new commits since last tag"
          exit 0
        fi

        # Determine version bump based on commit messages
        if git log ${LATEST_TAG}..HEAD --grep="BREAKING CHANGE\|feat!" --oneline | grep -q .; then
          VERSION_BUMP="major"
        elif git log ${LATEST_TAG}..HEAD --grep="feat:" --oneline | grep -q .; then
          VERSION_BUMP="minor"
        else
          VERSION_BUMP="patch"
        fi

        # Calculate new version
        CURRENT_VERSION=${LATEST_TAG#v}
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}

        case "$VERSION_BUMP" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac

        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: üè∑Ô∏è Create and Push Tag
      run: |
        NEW_VERSION=${{ steps.version.outputs.new_version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION

        Automated release created by GitHub Actions

        ## Changes since last release:
        ${{ steps.version.outputs.changelog }}

        ## Build Information:
        - Commit: ${GITHUB_SHA::8}
        - Build Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Go Version: ${{ env.GO_VERSION }}"

        git push origin $NEW_VERSION

    - name: üéä Tag Created Notification
      run: |
        echo "üè∑Ô∏è Successfully created tag ${{ steps.version.outputs.new_version }}"
        echo "üì¶ Tag URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }}"
