name: üè∑Ô∏è Automated Release

on:
  workflow_run:
    workflows: ["üöÄ GitPersona CI/CD Pipeline"]
    types:
      - completed
    branches:
      - main

env:
  GO_VERSION: '1.23'
  BINARY_NAME: gitpersona

jobs:
  # üè∑Ô∏è Auto Release
  auto-release:
    name: üè∑Ô∏è Create Automatic Release
    if: github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: üêπ Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}

    - name: üìã Generate Changelog
      id: changelog
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Generate changelog since latest tag
        CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        
        if [ -z "$CHANGELOG" ]; then
          echo "No new commits since last tag"
          exit 0
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
        # Determine version bump based on commit messages
        if git log ${LATEST_TAG}..HEAD --grep="BREAKING CHANGE\|feat!" --oneline | grep -q .; then
          VERSION_BUMP="major"
        elif git log ${LATEST_TAG}..HEAD --grep="feat:" --oneline | grep -q .; then
          VERSION_BUMP="minor"
        else
          VERSION_BUMP="patch"
        fi
        
        echo "version_bump=$VERSION_BUMP" >> $GITHUB_OUTPUT
        echo "has_changes=true" >> $GITHUB_OUTPUT

    - name: üî¢ Calculate New Version
      id: version
      if: steps.changelog.outputs.has_changes == 'true'
      run: |
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        
        # Remove 'v' prefix for calculation
        CURRENT_VERSION=${LATEST_TAG#v}
        
        # Split version into components
        IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR=${VERSION_PARTS[0]:-0}
        MINOR=${VERSION_PARTS[1]:-0}
        PATCH=${VERSION_PARTS[2]:-0}
        
        # Increment based on changelog analysis
        case "${{ steps.changelog.outputs.version_bump }}" in
          major)
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
            ;;
          minor)
            MINOR=$((MINOR + 1))
            PATCH=0
            ;;
          patch)
            PATCH=$((PATCH + 1))
            ;;
        esac
        
        NEW_VERSION="v${MAJOR}.${MINOR}.${PATCH}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version will be: $NEW_VERSION"

    - name: üèóÔ∏è Build Release Binaries
      if: steps.changelog.outputs.has_changes == 'true'
      run: |
        VERSION=${{ steps.version.outputs.new_version }}
        COMMIT=${GITHUB_SHA::8}
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        
        mkdir -p dist
        
        # Build for multiple platforms
        platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")
        
        for platform in "${platforms[@]}"; do
          IFS='/' read -ra PLATFORM_PARTS <<< "$platform"
          GOOS=${PLATFORM_PARTS[0]}
          GOARCH=${PLATFORM_PARTS[1]}
          
          output_name="${BINARY_NAME}-${GOOS}-${GOARCH}"
          if [ "$GOOS" = "windows" ]; then
            output_name="${output_name}.exe"
          fi
          
          echo "Building for $GOOS/$GOARCH..."
          
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags "-X main.Version=${VERSION} -X main.Commit=${COMMIT} -X main.BuildTime=${BUILD_TIME} -w -s" \
            -o "dist/${output_name}" \
            .
        done
        
        # Create checksums
        cd dist
        sha256sum * > checksums.txt
        ls -la

    - name: üè∑Ô∏è Create Git Tag
      if: steps.changelog.outputs.has_changes == 'true'
      run: |
        NEW_VERSION=${{ steps.version.outputs.new_version }}
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION

        Automated release created by GitHub Actions
        
        ## Changes since last release:
        ${{ steps.changelog.outputs.changelog }}
        
        ## Build Information:
        - Commit: ${GITHUB_SHA::8}
        - Build Time: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
        - Go Version: ${{ env.GO_VERSION }}"
        
        git push origin $NEW_VERSION

    - name: üöÄ Create GitHub Release
      if: steps.changelog.outputs.has_changes == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.new_version }}
        name: "üéâ GitPersona ${{ steps.version.outputs.new_version }}"
        body: |
          ## üéâ GitPersona Release ${{ steps.version.outputs.new_version }}
          
          **Automated release created after successful CI/CD pipeline** ‚úÖ
          
          ### üì¶ Downloads
          Choose the appropriate binary for your platform:
          
          | Platform | Architecture | Download |
          |----------|-------------|----------|
          | **Linux** | AMD64 | [`gitpersona-linux-amd64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/gitpersona-linux-amd64) |
          | **Linux** | ARM64 | [`gitpersona-linux-arm64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/gitpersona-linux-arm64) |
          | **macOS** | Intel | [`gitpersona-darwin-amd64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/gitpersona-darwin-amd64) |
          | **macOS** | Apple Silicon | [`gitpersona-darwin-arm64`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/gitpersona-darwin-arm64) |
          | **Windows** | AMD64 | [`gitpersona-windows-amd64.exe`](https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/gitpersona-windows-amd64.exe) |
          
          ### üîê Quick Installation
          ```bash
          # Linux/macOS (replace with your platform)
          curl -L -o gitpersona https://github.com/${{ github.repository }}/releases/download/${{ steps.version.outputs.new_version }}/gitpersona-linux-amd64
          chmod +x gitpersona
          sudo mv gitpersona /usr/local/bin/
          
          # Verify installation
          gitpersona --version
          gitpersona --help
          ```
          
          ### üÜï What's Changed
          ${{ steps.changelog.outputs.changelog }}
          
          ### üîí Security
          - **Checksums**: Verify download integrity using `checksums.txt`
          - **Ed25519 Keys**: Quantum-resistant SSH key generation
          - **2025 Security Standards**: Following latest best practices
          
          ### üöÄ Quick Start
          ```bash
          # Add your GitHub account automatically
          gitpersona add-github YOUR_USERNAME --email your@example.com
          
          # Switch accounts instantly  
          gitpersona switch work
          gitpersona switch personal
          
          # Enable shell integration
          echo 'eval "$(gitpersona init)"' >> ~/.zshrc
          ```
          
          **Full documentation**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          
          ---
          
          **üéØ Built with ‚ù§Ô∏è for developers juggling multiple GitHub accounts**
        files: |
          dist/*
        draft: false
        prerelease: false
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: üéä Success Notification
      if: steps.changelog.outputs.has_changes == 'true'
      run: |
        echo "üéâ Successfully created release ${{ steps.version.outputs.new_version }}"
        echo "üì¶ Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.new_version }}"
        echo "üöÄ GitPersona is ready for the world!"
